name: Pruebas de Integración y Regresión

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MYSQL_VERSION: '8.0'
  MYSQL_ROOT_PASSWORD: 'root'
  MYSQL_DATABASE: 'agrocloud_test'
  MYSQL_USER: 'testuser'
  MYSQL_PASSWORD: 'testpass'

jobs:
  # Job para pruebas de integración
  integration-tests:
    name: Pruebas de Integración REST
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -p${{ env.MYSQL_ROOT_PASSWORD }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache dependencias Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Verificar conexión a MySQL
      run: |
        echo "Verificando conexión a MySQL..."
        mysql -h 127.0.0.1 -P 3306 -u ${{ env.MYSQL_USER }} -p${{ env.MYSQL_PASSWORD }} -e "SELECT 1;" ${{ env.MYSQL_DATABASE }}

    - name: Ejecutar pruebas de integración
      run: |
        echo "🚀 Ejecutando pruebas de integración..."
        ./mvnw clean test -Dtest=IntegrationTestSuite -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/${{ env.MYSQL_DATABASE }}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
        SPRING_DATASOURCE_USERNAME: ${{ env.MYSQL_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ env.MYSQL_PASSWORD }}

    - name: Generar reporte de cobertura
      run: |
        echo "📊 Generando reporte de cobertura..."
        ./mvnw jacoco:report

    - name: Subir reporte de cobertura
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: integration-tests
        name: integration-tests-coverage

    - name: Publicar resultados de pruebas
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Resultados de Pruebas de Integración
        path: target/surefire-reports/*.xml
        reporter: java-junit

  # Job para pruebas de regresión
  regression-tests:
    name: Pruebas de Regresión
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -p${{ env.MYSQL_ROOT_PASSWORD }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache dependencias Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Ejecutar todas las pruebas
      run: |
        echo "🔄 Ejecutando pruebas de regresión completas..."
        ./mvnw clean test -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/${{ env.MYSQL_DATABASE }}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
        SPRING_DATASOURCE_USERNAME: ${{ env.MYSQL_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ env.MYSQL_PASSWORD }}

    - name: Verificar resultados de pruebas
      run: |
        echo "✅ Verificando resultados de pruebas..."
        if [ -f target/surefire-reports/TEST-*.xml ]; then
          echo "📋 Reportes de pruebas encontrados:"
          ls -la target/surefire-reports/
        else
          echo "❌ No se encontraron reportes de pruebas"
          exit 1
        fi

    - name: Generar reporte de regresión
      run: |
        echo "📈 Generando reporte de regresión..."
        ./mvnw jacoco:report
        
        # Crear reporte personalizado
        echo "# Reporte de Pruebas de Regresión" > regression-report.md
        echo "## Fecha: $(date)" >> regression-report.md
        echo "## Commit: ${{ github.sha }}" >> regression-report.md
        echo "## Branch: ${{ github.ref_name }}" >> regression-report.md
        echo "" >> regression-report.md
        echo "### Resumen de Pruebas:" >> regression-report.md
        echo "- ✅ Pruebas de integración: COMPLETADAS" >> regression-report.md
        echo "- ✅ Pruebas de regresión: COMPLETADAS" >> regression-report.md
        echo "- ✅ Cobertura de código: GENERADA" >> regression-report.md

    - name: Subir reporte de regresión
      uses: actions/upload-artifact@v3
      with:
        name: regression-report
        path: |
          regression-report.md
          target/site/jacoco/
          target/surefire-reports/

  # Job para validación de calidad
  quality-gate:
    name: Validación de Calidad
    runs-on: ubuntu-latest
    needs: [integration-tests, regression-tests]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache dependencias Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Análisis de calidad con SonarQube
      run: |
        echo "🔍 Ejecutando análisis de calidad..."
        ./mvnw clean compile sonar:sonar \
          -Dsonar.projectKey=agrogestion-backend \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verificar calidad del código
      run: |
        echo "📊 Verificando métricas de calidad..."
        # Aquí se pueden agregar verificaciones adicionales
        echo "✅ Análisis de calidad completado"

  # Job para notificaciones
  notify:
    name: Notificaciones
    runs-on: ubuntu-latest
    needs: [integration-tests, regression-tests, quality-gate]
    if: always()
    
    steps:
    - name: Notificar resultados
      run: |
        echo "📢 Enviando notificaciones..."
        
        if [ "${{ needs.integration-tests.result }}" == "success" ] && 
           [ "${{ needs.regression-tests.result }}" == "success" ] && 
           [ "${{ needs.quality-gate.result }}" == "success" ]; then
          echo "✅ Todas las pruebas pasaron exitosamente"
          echo "🚀 El código está listo para merge"
        else
          echo "❌ Algunas pruebas fallaron"
          echo "🛑 El merge está bloqueado"
          exit 1
        fi

  # Job para deployment (solo en main)
  deploy:
    name: Deployment
    runs-on: ubuntu-latest
    needs: [integration-tests, regression-tests, quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Build aplicación
      run: |
        echo "🏗️ Construyendo aplicación..."
        ./mvnw clean package -DskipTests

    - name: Deploy a producción
      run: |
        echo "🚀 Desplegando a producción..."
        # Aquí se agregarían los comandos de deployment específicos
        echo "✅ Deployment completado"
