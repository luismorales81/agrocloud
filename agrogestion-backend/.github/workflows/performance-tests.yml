name: Pruebas de Performance

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar pruebas de performance diariamente a las 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MYSQL_VERSION: '8.0'
  MYSQL_ROOT_PASSWORD: 'root'
  MYSQL_DATABASE: 'agrocloud_test'
  MYSQL_USER: 'testuser'
  MYSQL_PASSWORD: 'testpass'

jobs:
  # Job para pruebas de performance con JMeter
  performance-tests:
    name: Pruebas de Performance con JMeter
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -p${{ env.MYSQL_ROOT_PASSWORD }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache dependencias Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Instalar JMeter
      run: |
        echo "📦 Instalando Apache JMeter..."
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz
        tar -xzf apache-jmeter-5.5.tgz
        sudo mv apache-jmeter-5.5 /opt/jmeter
        echo "/opt/jmeter/bin" >> $GITHUB_PATH

    - name: Iniciar aplicación para pruebas
      run: |
        echo "🚀 Iniciando aplicación para pruebas de performance..."
        ./mvnw clean package -DskipTests
        nohup java -jar target/agrocloud-backend-*.jar \
          --spring.profiles.active=test \
          --server.port=8080 \
          --spring.datasource.url=jdbc:mysql://127.0.0.1:3306/${{ env.MYSQL_DATABASE }}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC \
          --spring.datasource.username=${{ env.MYSQL_USER }} \
          --spring.datasource.password=${{ env.MYSQL_PASSWORD }} > app.log 2>&1 &
        
        # Esperar a que la aplicación esté lista
        echo "⏳ Esperando a que la aplicación esté lista..."
        for i in {1..30}; do
          if curl -f http://localhost:8080/api/auth/test > /dev/null 2>&1; then
            echo "✅ Aplicación lista en puerto 8080"
            break
          fi
          echo "Esperando... ($i/30)"
          sleep 10
        done

    - name: Crear plan de pruebas JMeter
      run: |
        echo "📝 Creando plan de pruebas JMeter..."
        cat > performance-test.jmx << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
          <hashTree>
            <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="AgroGestion Performance Test" enabled="true">
              <stringProp name="TestPlan.comments">Plan de pruebas de performance para AgroGestion</stringProp>
              <boolProp name="TestPlan.functional_mode">false</boolProp>
              <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
              <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
              <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="TestPlan.user_define_classpath"></stringProp>
            </TestPlan>
            <hashTree>
              <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControllerGui" testclass="LoopController" testname="Loop Controller" enabled="true">
                  <boolProp name="LoopController.continue_forever">false</boolProp>
                  <stringProp name="LoopController.loops">10</stringProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">50</stringProp>
                <stringProp name="ThreadGroup.ramp_time">30</stringProp>
                <boolProp name="ThreadGroup.scheduler">false</boolProp>
                <stringProp name="ThreadGroup.duration"></stringProp>
                <stringProp name="ThreadGroup.delay"></stringProp>
                <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
              </ThreadGroup>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /api/auth/test" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">localhost</stringProp>
                  <stringProp name="HTTPSampler.port">8080</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/auth/test</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /api/v1/campos" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">localhost</stringProp>
                  <stringProp name="HTTPSampler.port">8080</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/campos</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /api/v1/insumos" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">localhost</stringProp>
                  <stringProp name="HTTPSampler.port">8080</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/v1/insumos</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </jmeterTestPlan>
        EOF

    - name: Ejecutar pruebas de performance
      run: |
        echo "🏃 Ejecutando pruebas de performance con JMeter..."
        jmeter -n -t performance-test.jmx -l performance-results.jtl -e -o performance-report/
        
        echo "📊 Generando reporte de performance..."
        echo "## Reporte de Performance - AgroGestion" > performance-summary.md
        echo "### Fecha: $(date)" >> performance-summary.md
        echo "### Configuración:" >> performance-summary.md
        echo "- Usuarios concurrentes: 50" >> performance-summary.md
        echo "- Tiempo de ramp-up: 30 segundos" >> performance-summary.md
        echo "- Iteraciones por usuario: 10" >> performance-summary.md
        echo "" >> performance-summary.md
        echo "### Endpoints probados:" >> performance-summary.md
        echo "- GET /api/auth/test" >> performance-summary.md
        echo "- GET /api/v1/campos" >> performance-summary.md
        echo "- GET /api/v1/insumos" >> performance-summary.md
        echo "" >> performance-summary.md
        echo "### Resultados:" >> performance-summary.md
        echo "Los resultados detallados están disponibles en el directorio performance-report/" >> performance-summary.md

    - name: Analizar resultados de performance
      run: |
        echo "📈 Analizando resultados de performance..."
        
        # Extraer métricas básicas del archivo JTL
        if [ -f performance-results.jtl ]; then
          echo "### Métricas de Performance:" >> performance-summary.md
          echo "" >> performance-summary.md
          
          # Contar requests exitosos
          success_count=$(grep -c ",200," performance-results.jtl || echo "0")
          total_count=$(wc -l < performance-results.jtl)
          echo "- Requests exitosos: $success_count / $total_count" >> performance-summary.md
          
          # Calcular tiempo promedio de respuesta
          avg_time=$(awk -F',' '{sum+=$2; count++} END {if(count>0) print sum/count; else print 0}' performance-results.jtl)
          echo "- Tiempo promedio de respuesta: ${avg_time}ms" >> performance-summary.md
          
          # Encontrar tiempo máximo
          max_time=$(awk -F',' 'BEGIN{max=0} {if($2>max) max=$2} END {print max}' performance-results.jtl)
          echo "- Tiempo máximo de respuesta: ${max_time}ms" >> performance-summary.md
          
          # Calcular throughput
          throughput=$(echo "scale=2; $total_count / 60" | bc -l 2>/dev/null || echo "N/A")
          echo "- Throughput: ${throughput} requests/segundo" >> performance-summary.md
        fi

    - name: Subir reportes de performance
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          performance-summary.md
          performance-results.jtl
          performance-report/
        retention-days: 30

    - name: Comentar en PR con resultados
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## 📊 Resultados de Pruebas de Performance\n\n';
          
          if (fs.existsSync('performance-summary.md')) {
            const summary = fs.readFileSync('performance-summary.md', 'utf8');
            comment += summary;
          } else {
            comment += '❌ No se pudieron generar los reportes de performance.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Limpiar procesos
      if: always()
      run: |
        echo "🧹 Limpiando procesos..."
        pkill -f "java.*agrocloud-backend" || true
        sleep 5
