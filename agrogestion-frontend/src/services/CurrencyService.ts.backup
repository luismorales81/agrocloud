// CurrencyService.ts - Servicio para gestión de monedas y conversiones
interface ExchangeRate {
  from: string;
  to: string;
  rate: number;
  lastUpdate: string;
  source: string;
}

interface CurrencyConfig {
  primaryCurrency: 'ARS' | 'USD' | 'EUR';
  autoUpdate: boolean;
  updateInterval: number; // en minutos
  apiKey?: string;
}

class CurrencyService {
  private rates: Map<string, ExchangeRate> = new Map();
  private config: CurrencyConfig = {
    primaryCurrency: 'ARS',
    autoUpdate: true,
    updateInterval: 30
  };
  private lastUpdate: Date | null = null;
  private autoUpdateInterval: NodeJS.Timeout | null = null;

  constructor() {
    this.loadConfig();
    this.loadRates();
    if (this.config.autoUpdate) {
      this.startAutoUpdate();
    }
  }

  // Inicializar tasas de cambio
  private async initializeRates(): Promise<void> {
    // Simulación de API de tasas de cambio
    const mockRates: ExchangeRate[] = [
      {
        from: 'USD',
        to: 'ARS',
        rate: 850.50,
        lastUpdate: new Date().toISOString(),
        source: 'simulated'
      },
      {
        from: 'ARS',
        to: 'USD',
        rate: 1 / 850.50,
        lastUpdate: new Date().toISOString(),
        source: 'simulated'
      },
      {
        from: 'EUR',
        to: 'ARS',
        rate: 920.25,
        lastUpdate: new Date().toISOString(),
        source: 'simulated'
      },
      {
        from: 'ARS',
        to: 'EUR',
        rate: 1 / 920.25,
        lastUpdate: new Date().toISOString(),
        source: 'simulated'
      },
      {
        from: 'USD',
        to: 'EUR',
        rate: 0.92,
        lastUpdate: new Date().toISOString(),
        source: 'simulated'
      },
      {
        from: 'EUR',
        to: 'USD',
        rate: 1 / 0.92,
        lastUpdate: new Date().toISOString(),
        source: 'simulated'
      }
    ];

    mockRates.forEach(rate => {
      const key = `${rate.from}-${rate.to}`;
      this.rates.set(key, rate);
    });

    this.lastUpdate = new Date();
    this.saveRates();
  }

  // Actualizar tasas de cambio
  public async updateRates(): Promise<void> {
    try {
      // Simulación de actualización desde API
      const response = await fetch('https://api.exchangerate.host/latest?base=USD');
      if (response.ok) {
        const data = await response.json();
        
        // Actualizar tasas USD -> ARS
        this.rates.set('USD-ARS', {
          from: 'USD',
          to: 'ARS',
          rate: data.rates.ARS || 850.50,
          lastUpdate: new Date().toISOString(),
          source: 'exchangerate.host'
        });

        // Actualizar tasas ARS -> USD
        this.rates.set('ARS-USD', {
          from: 'ARS',
          to: 'USD',
          rate: 1 / (data.rates.ARS || 850.50),
          lastUpdate: new Date().toISOString(),
          source: 'exchangerate.host'
        });

        this.lastUpdate = new Date();
        this.saveRates();
      } else {
        // Fallback a tasas simuladas
        await this.initializeRates();
      }
    } catch (error) {
      console.warn('Error actualizando tasas de cambio, usando valores simulados:', error);
      await this.initializeRates();
    }
  }

  // Convertir moneda
  public convert(amount: number, fromCurrency: string, toCurrency: string): number {
    if (fromCurrency === toCurrency) {
      return amount;
    }

    const rateKey = `${fromCurrency}-${toCurrency}`;
    const rate = this.rates.get(rateKey);

    if (rate) {
      return amount * rate.rate;
    }

    // Intentar conversión indirecta
    const usdRate = this.rates.get(`${fromCurrency}-USD`);
    const targetRate = this.rates.get(`USD-${toCurrency}`);

    if (usdRate && targetRate) {
      return amount * usdRate.rate * targetRate.rate;
    }

    return amount; // Retornar valor original si no se puede convertir
  }

  // Formatear moneda
  public formatCurrency(amount: number, currency: string, locale: string = 'es-AR'): string {
    const formatter = new Intl.NumberFormat(locale, {
      style: 'currency',
      currency: currency,
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });

    return formatter.format(amount);
  }

  // Obtener configuración
  public getConfig(): CurrencyConfig {
    return { ...this.config };
  }

  // Actualizar configuración
  public updateConfig(newConfig: Partial<CurrencyConfig>) {
    this.config = { ...this.config, ...newConfig };
    this.saveConfig();

    if (this.config.autoUpdate) {
      this.startAutoUpdate();
    } else {
      this.stopAutoUpdate();
    }
  }

  // Guardar configuración
  private saveConfig() {
    localStorage.setItem('currencyConfig', JSON.stringify(this.config));
  }

  // Cargar configuración
  private loadConfig() {
    const saved = localStorage.getItem('currencyConfig');
    if (saved) {
      this.config = { ...this.config, ...JSON.parse(saved) };
    }
  }

  // Obtener todas las tasas disponibles
  public getAllRates(): Map<string, ExchangeRate> {
    return new Map(this.rates);
  }

  // Obtener última actualización
  public getLastUpdate(): Date | null {
    return this.lastUpdate;
  }

  // Forzar actualización de tasas
  public async forceUpdate(): Promise<void> {
    await this.updateRates();
  }

  // Verificar si las tasas están actualizadas
  public isUpToDate(): boolean {
    return !this.isStale();
  }

  // Obtener monedas soportadas
  public getSupportedCurrencies(): string[] {
    return ['ARS', 'USD', 'EUR'];
  }

  // Convertir y formatear
  public convertAndFormat(
    amount: number, 
    fromCurrency: string, 
    toCurrency: string, 
    locale: string = 'es-AR'
  ): string {
    const converted = this.convert(amount, fromCurrency, toCurrency);
    return this.formatCurrency(converted, toCurrency, locale);
  }

  // Obtener información de la tasa específica
  public getRateInfo(fromCurrency: string, toCurrency: string): ExchangeRate | null {
    const rateKey = `${fromCurrency}-${toCurrency}`;
    return this.rates.get(rateKey) || null;
  }

  // Limpiar datos
  public cleanup() {
    this.stopAutoUpdate();
    this.rates.clear();
    localStorage.removeItem('exchangeRates');
    localStorage.removeItem('lastRateUpdate');
  }

  // Métodos adicionales para compatibilidad
  public getCurrencyConfig(): CurrencyConfig {
    return this.getConfig();
  }

  public setCurrencyConfig(config: CurrencyConfig) {
    this.updateConfig(config);
  }

  public updateCurrencyRates(): Promise<void> {
    return this.updateRates();
  }

  public getDefaultRateInfo(): { rate: number; lastUpdate: string; from: string; to: string } | null {
    const rate = this.rates.get('USD-ARS');
    if (rate) {
      return {
        rate: rate.rate,
        lastUpdate: rate.lastUpdate,
        from: rate.from,
        to: rate.to
      };
    }
    return null;
  }

  public formatRate(rate: number): string {
    return `$${rate.toLocaleString('es-AR', { 
      minimumFractionDigits: 2, 
      maximumFractionDigits: 2 
    })}`;
  }

  // Verificar si las tasas están desactualizadas
  private isStale(): boolean {
    if (!this.lastUpdate) return true;
    const now = new Date();
    const diff = now.getTime() - this.lastUpdate.getTime();
    const hoursDiff = diff / (1000 * 60 * 60);
    return hoursDiff > 24; // Considerar desactualizado después de 24 horas
  }

  // Iniciar actualización automática
  private startAutoUpdate() {
    if (this.autoUpdateInterval) {
      clearInterval(this.autoUpdateInterval);
    }
    
    this.autoUpdateInterval = setInterval(() => {
      this.updateRates();
    }, this.config.updateInterval * 60 * 1000);
  }

  // Detener actualización automática
  private stopAutoUpdate() {
    if (this.autoUpdateInterval) {
      clearInterval(this.autoUpdateInterval);
      this.autoUpdateInterval = null;
    }
  }

  // Guardar tasas en localStorage
  private saveRates() {
    const ratesArray = Array.from(this.rates.entries());
    localStorage.setItem('exchangeRates', JSON.stringify(ratesArray));
    if (this.lastUpdate) {
      localStorage.setItem('lastRateUpdate', this.lastUpdate.toISOString());
    }
  }

  // Cargar tasas desde localStorage
  private loadRates() {
    const savedRates = localStorage.getItem('exchangeRates');
    const savedUpdate = localStorage.getItem('lastRateUpdate');
    
    if (savedRates && savedUpdate) {
      try {
        const ratesArray = JSON.parse(savedRates);
        this.rates = new Map(ratesArray);
        this.lastUpdate = new Date(savedUpdate);
        
        // Verificar si las tasas están desactualizadas
        if (this.isStale()) {
          this.updateRates();
        }
      } catch (error) {
        console.warn('Error cargando tasas guardadas:', error);
        this.initializeRates();
      }
    } else {
      this.initializeRates();
    }
  }
}

export const currencyService = new CurrencyService();

export default currencyService;
