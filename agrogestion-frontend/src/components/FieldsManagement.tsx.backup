import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useLocation } from '../contexts/LocationContext';
import { getMapCenter } from '../config/googleMaps';
import FieldWeatherWidget from './FieldWeatherWidget';

// Declaraci√≥n de tipos para NodeJS
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      NODE_ENV: 'development' | 'production' | 'test';
      REACT_APP_API_URL?: string;
    }
    type Timeout = ReturnType<typeof setTimeout>;
  }
}

// Declaraci√≥n para process
declare const process: {
  env: {
    NODE_ENV: 'development' | 'production' | 'test';
    REACT_APP_API_URL?: string;
  };
};

interface Field {
  id?: number;
  nombre: string;
  superficie: number;
  poligono: string;
  coordenadas?: Array<{lat: number; lng: number}>;
  descripcion?: string;
  ubicacion?: string;
  tipoSuelo?: string;
  estado?: string;
  activo?: boolean;
  fechaCreacion?: string;
  fechaActualizacion?: string;
}

// Componente separado para Google Maps con Drawing Manager
const GoogleMapWithDrawing: React.FC<{ 
  onPolygonComplete: (polygon: any) => void;
  onMapReady: () => void;
  center?: { lat: number; lng: number };
  zoom?: number;
}> = ({ onPolygonComplete, onMapReady, center, zoom = 16 }) => {
  const { location } = useLocation();
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<any>(null);
  const drawingManagerRef = useRef<any>(null);

  // Usar la ubicaci√≥n del usuario o la proporcionada como prop
  const mapCenter = center || getMapCenter(location || undefined);

  useEffect(() => {
    let isMounted = true;
    let checkInterval: NodeJS.Timeout;

    const initMap = () => {
      if (!mapRef.current || !isMounted) return;

      try {
        if (!(window as any).google || !(window as any).google.maps || !(window as any).google.maps.Map) {
          console.log('‚ùå Google Maps no est√° completamente cargado');
          return;
        }

        // Evitar inicializaci√≥n m√∫ltiple
        if (mapInstanceRef.current) {
          console.log('‚úÖ Mapa ya inicializado');
          return;
        }

        const mapOptions = {
          center: mapCenter,
          zoom: zoom,
          mapTypeId: 'satellite',
          disableDefaultUI: false,
          zoomControl: true,
          mapTypeControl: true,
          streetViewControl: true,
          fullscreenControl: true
        };

        mapInstanceRef.current = new (window as any).google.maps.Map(mapRef.current, mapOptions);

        const drawingManager = new (window as any).google.maps.drawing.DrawingManager({
          drawingMode: (window as any).google.maps.drawing.OverlayType.POLYGON,
          drawingControl: true,
          drawingControlOptions: {
            position: (window as any).google.maps.ControlPosition.TOP_CENTER,
            drawingModes: [(window as any).google.maps.drawing.OverlayType.POLYGON]
          },
          polygonOptions: {
            fillColor: '#4CAF50',
            fillOpacity: 0.3,
            strokeWeight: 2,
            strokeColor: '#4CAF50',
            editable: true,
            draggable: true
          }
        });

        drawingManager.setMap(mapInstanceRef.current);
        drawingManagerRef.current = drawingManager;

        (window as any).google.maps.event.addListener(drawingManager, 'polygoncomplete', (polygon: any) => {
          if (drawingManagerRef.current && isMounted) {
            drawingManagerRef.current.setDrawingMode(null);
          }
          onPolygonComplete(polygon);
        });

        // Forzar redibujado una sola vez
        setTimeout(() => {
          if (mapInstanceRef.current && mapInstanceRef.current.setZoom && isMounted) {
            window.dispatchEvent(new Event('resize'));
          }
        }, 500);

        onMapReady();
      } catch (error) {
        console.error('‚ùå Error creando mapa:', error);
      }
    };

    if ((window as any).google && (window as any).google.maps && (window as any).google.maps.Map) {
      initMap();
    } else {
      checkInterval = setInterval(() => {
        if ((window as any).google && (window as any).google.maps && (window as any).google.maps.Map) {
          clearInterval(checkInterval);
          initMap();
        }
      }, 100);
    }

    return () => {
      isMounted = false;
      if (checkInterval) {
        clearInterval(checkInterval);
      }
    };
  }, []); // Solo ejecutar una vez al montar el componente

  return (
    <div
      ref={mapRef}
      style={{
        width: '100%',
        height: '100%',
        position: 'absolute',
        top: 0,
        left: 0
      }}
    />
  );
};

// Componente para mostrar un campo espec√≠fico en el mapa
const GoogleMapViewField: React.FC<{ 
  fieldPolygon: string;
  fieldName: string;
  center?: { lat: number; lng: number };
  zoom?: number;
}> = ({ fieldPolygon, fieldName, center = { lat: -34.6118, lng: -58.3960 }, zoom = 16 }) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<any>(null);
  const fieldPolygonRef = useRef<any>(null);

  useEffect(() => {
    let isMounted = true;
    let checkInterval: NodeJS.Timeout;

    const initMap = () => {
      if (!mapRef.current || !isMounted) return;

      try {
        // Verificar que Google Maps est√© completamente cargado
        if (!(window as any).google || !(window as any).google.maps || !(window as any).google.maps.Map) {
          console.log('‚ùå Google Maps no est√° completamente cargado para vista de campo');
          return;
        }

        // Evitar inicializaci√≥n m√∫ltiple
        if (mapInstanceRef.current) {
          console.log('‚úÖ Mapa ya inicializado para campo');
          return;
        }

        console.log('üó∫Ô∏è Inicializando mapa para mostrar campo:', fieldName);
        
        const mapOptions = {
          center: center,
          zoom: zoom,
          mapTypeId: 'satellite',
          disableDefaultUI: false,
          zoomControl: true,
          mapTypeControl: true,
          streetViewControl: true,
          fullscreenControl: true
        };

        mapInstanceRef.current = new (window as any).google.maps.Map(mapRef.current, mapOptions);
        console.log('‚úÖ Mapa creado para mostrar campo');

        // Dibujar el pol√≠gono del campo
        if (fieldPolygon) {
          try {
            const polygonData = JSON.parse(fieldPolygon);
            const coordinates = polygonData.coordinates[0].map((coord: number[]) => ({
              lat: coord[1],
              lng: coord[0]
            }));

            const fieldPolygonShape = new (window as any).google.maps.Polygon({
              paths: coordinates,
              strokeColor: '#4CAF50',
              strokeOpacity: 0.8,
              strokeWeight: 3,
              fillColor: '#4CAF50',
              fillOpacity: 0.2,
              map: mapInstanceRef.current
            });

            fieldPolygonRef.current = fieldPolygonShape;
            console.log('‚úÖ Pol√≠gono del campo dibujado en modal');

            // Centrar mapa en el campo
            const bounds = new (window as any).google.maps.LatLngBounds();
            coordinates.forEach((coord: any) => bounds.extend(coord));
            mapInstanceRef.current.fitBounds(bounds);
          } catch (error) {
            console.error('Error dibujando pol√≠gono del campo en modal:', error);
          }
        }

        // Forzar redibujado una sola vez
        setTimeout(() => {
          if (mapInstanceRef.current && isMounted) {
            window.dispatchEvent(new Event('resize'));
          }
        }, 500);

      } catch (error) {
        console.error('‚ùå Error creando mapa para mostrar campo:', error);
      }
    };

    // Verificar si Google Maps est√° disponible
    if ((window as any).google && (window as any).google.maps && (window as any).google.maps.Map) {
      console.log('‚úÖ Google Maps disponible, inicializando mapa para campo...');
      initMap();
    } else {
      console.log('‚è≥ Google Maps no disponible para campo, esperando...');
      checkInterval = setInterval(() => {
        if ((window as any).google && (window as any).google.maps && (window as any).google.maps.Map) {
          clearInterval(checkInterval);
          console.log('‚úÖ Google Maps cargado, inicializando mapa para campo...');
          initMap();
        }
      }, 100);
    }

    return () => {
      isMounted = false;
      if (checkInterval) {
        clearInterval(checkInterval);
      }
    };
  }, []); // Solo ejecutar una vez al montar el componente

  return (
    <div
      ref={mapRef}
      style={{
        width: '100%',
        height: '100%',
        position: 'absolute',
        top: 0,
        left: 0
      }}
    />
  );
};

const FieldsManagement: React.FC = () => {
  const [fields, setFields] = useState<Field[]>([]);
  const [showForm, setShowForm] = useState(false);
  const [showMap, setShowMap] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedField, setSelectedField] = useState<Field | null>(null);
  const [formData, setFormData] = useState<Field>({
    nombre: '',
    superficie: 0,
    poligono: '',
    coordenadas: []
  });
  const [loading, setLoading] = useState(false);
  const [googleMapsReady, setGoogleMapsReady] = useState(false);
  // const [mapReady, setMapReady] = useState(false); // Variable no utilizada
  const [currentPolygon, setCurrentPolygon] = useState<any>(null);
       const [showCoordinates, setShowCoordinates] = useState(false);
  const [selectedCoordinates, setSelectedCoordinates] = useState<Array<{lat: number; lng: number}>>([]);
  const [showWeatherForField, setShowWeatherForField] = useState<number | null>(null);
   const [editingField, setEditingField] = useState<Field | null>(null);

  // Cargar campos desde la API
  const loadFields = async () => {
    try {
      setLoading(true);
      
      // Obtener token de autenticaci√≥n
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('No hay token de autenticaci√≥n');
        return;
      }

      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8080'}/api/campos`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        // Mapear los datos de la API al formato del frontend
        const mappedFields: Field[] = data.map((field: any) => ({
          id: field.id,
          nombre: field.nombre,
          superficie: field.areaHectareas || 0,
          poligono: field.poligono || '',
          coordenadas: field.coordenadas || [],
          descripcion: field.descripcion,
          ubicacion: field.ubicacion,
          tipoSuelo: field.tipoSuelo,
          estado: field.estado,
          activo: field.activo,
          fechaCreacion: field.fechaCreacion,
          fechaActualizacion: field.fechaActualizacion
        }));
        setFields(mappedFields);
      } else {
        console.error('Error cargando campos:', response.statusText);
      }
    } catch (error) {
      console.error('Error cargando campos:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadFields();
  }, []);

  // Cargar Google Maps cuando se muestra el formulario
  useEffect(() => {
    if (showForm && !googleMapsReady) {
      const loadGoogleMaps = async () => {
        try {
          if (!(window as any).google || !(window as any).google.maps) {
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCWz9FKCHBdLqbjhHCPcECww5hs2ugiWA0&libraries=drawing,geometry&loading=async`;
            script.async = true;
            script.defer = true;
            
            script.onload = () => {
              const checkInterval = setInterval(() => {
                if ((window as any).google && (window as any).google.maps && (window as any).google.maps.Map) {
                  clearInterval(checkInterval);
                  console.log('‚úÖ Google Maps cargado correctamente');
                  setGoogleMapsReady(true);
                }
              }, 100);
            };
            
            document.head.appendChild(script);
          } else {
            console.log('‚úÖ Google Maps ya est√° cargado');
            setGoogleMapsReady(true);
          }
        } catch (error) {
          console.error('Error cargando Google Maps:', error);
        }
      };

      loadGoogleMaps();
    }
  }, [showForm]); // Remover googleMapsReady de las dependencias

  // Manejar cuando se completa un pol√≠gono
  const handlePolygonComplete = useCallback((polygon: any) => {
    setCurrentPolygon(polygon);

    // Calcular superficie del pol√≠gono
    const area = (window as any).google.maps.geometry.spherical.computeArea(polygon.getPath());
    const areaHectareas = area / 10000; // Convertir m¬≤ a hect√°reas

    // Obtener coordenadas del pol√≠gono
    const path = polygon.getPath();
    const coordinates = path.getArray().map((latLng: any) => ({
      lat: latLng.lat(),
      lng: latLng.lng()
    }));

    // Convertir pol√≠gono a GeoJSON
    const geoJsonCoordinates = coordinates.map((coord: {lat: number; lng: number}) => [coord.lng, coord.lat]);
    const geoJson = {
      type: 'Polygon',
      coordinates: [geoJsonCoordinates]
    };

    setFormData(prev => ({
      ...prev,
      superficie: Math.round(areaHectareas * 100) / 100,
      poligono: JSON.stringify(geoJson),
      coordenadas: coordinates
    }));

    console.log('üìç Coordenadas del campo:', coordinates);
    console.log('üìê Superficie calculada:', Math.round(areaHectareas * 100) / 100, 'hect√°reas');
  }, []);

  // Manejar cuando el mapa est√° listo
  const handleMapReady = useCallback(() => {
    // setMapReady(true); // Variable no utilizada
  }, []);

     // Guardar campo (crear o actualizar)
   const saveField = async () => {
     try {
       setLoading(true);
       
       // Obtener token de autenticaci√≥n
       const token = localStorage.getItem('token');
       if (!token) {
         console.error('No hay token de autenticaci√≥n');
         return;
       }

       // Preparar datos para la API
       const fieldData = {
         nombre: formData.nombre,
         descripcion: formData.descripcion || '',
         ubicacion: formData.ubicacion || '',
         areaHectareas: formData.superficie,
         tipoSuelo: formData.tipoSuelo || '',
         estado: formData.estado || 'ACTIVO',
         activo: formData.activo !== false,
         poligono: formData.poligono,
         coordenadas: formData.coordenadas
       };

       let response;
       if (editingField) {
         // Actualizar campo existente
         response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8080'}/api/campos/${editingField.id}`, {
           method: 'PUT',
           headers: {
             'Content-Type': 'application/json',
             'Authorization': `Bearer ${token}`
           },
           body: JSON.stringify(fieldData)
         });
       } else {
         // Crear nuevo campo
         response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8080'}/api/campos`, {
           method: 'POST',
           headers: {
             'Content-Type': 'application/json',
             'Authorization': `Bearer ${token}`
           },
           body: JSON.stringify(fieldData)
         });
       }

       if (response.ok) {
         const savedField = await response.json();
         // Mapear la respuesta al formato del frontend
         const newField: Field = {
           id: savedField.id,
           nombre: savedField.nombre,
           superficie: savedField.areaHectareas || 0,
           poligono: savedField.poligono || '',
           coordenadas: savedField.coordenadas || [],
           descripcion: savedField.descripcion,
           ubicacion: savedField.ubicacion,
           tipoSuelo: savedField.tipoSuelo,
           estado: savedField.estado,
           activo: savedField.activo,
           fechaCreacion: savedField.fechaCreacion,
           fechaActualizacion: savedField.fechaActualizacion
         };
         
         if (editingField) {
           // Actualizar campo existente en la lista
           setFields(prev => prev.map(f => f.id === editingField.id ? newField : f));
           alert('Campo actualizado correctamente');
         } else {
           // Agregar nuevo campo a la lista
           setFields(prev => [...prev, newField]);
           alert('Campo creado correctamente');
         }
         
         // Limpiar formulario
         setFormData({ nombre: '', superficie: 0, poligono: '', coordenadas: [] });
         setShowForm(false);
         setEditingField(null);
         setCurrentPolygon(null);
         
         // Limpiar pol√≠gono del mapa
         if (currentPolygon) {
           currentPolygon.setMap(null);
         }
       } else {
         console.error('Error guardando campo:', response.statusText);
         alert('Error al guardar el campo. Por favor, int√©ntalo de nuevo.');
       }
     } catch (error) {
       console.error('Error guardando campo:', error);
       alert('Error al guardar el campo. Por favor, int√©ntalo de nuevo.');
     } finally {
       setLoading(false);
     }
   };

     // Actualizar campo
   const updateField = async (id: number, fieldData: Field) => {
     try {
       setLoading(true);
       
       // Obtener token de autenticaci√≥n
       const token = localStorage.getItem('token');
       if (!token) {
         console.error('No hay token de autenticaci√≥n');
         return;
       }

       // Preparar datos para la API
       const updateData = {
         nombre: fieldData.nombre,
         descripcion: fieldData.descripcion || '',
         ubicacion: fieldData.ubicacion || '',
         areaHectareas: fieldData.superficie,
         tipoSuelo: fieldData.tipoSuelo || '',
         estado: fieldData.estado || 'ACTIVO',
         activo: fieldData.activo !== false,
         poligono: fieldData.poligono,
         coordenadas: fieldData.coordenadas
       };

       const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8080'}/api/campos/${id}`, {
         method: 'PUT',
         headers: {
           'Content-Type': 'application/json',
           'Authorization': `Bearer ${token}`
         },
         body: JSON.stringify(updateData)
       });

       if (response.ok) {
         const updatedField = await response.json();
         // Mapear la respuesta al formato del frontend
         const mappedField: Field = {
           id: updatedField.id,
           nombre: updatedField.nombre,
           superficie: updatedField.areaHectareas || 0,
           poligono: updatedField.poligono || '',
           coordenadas: updatedField.coordenadas || [],
           descripcion: updatedField.descripcion,
           ubicacion: updatedField.ubicacion,
           tipoSuelo: updatedField.tipoSuelo,
           estado: updatedField.estado,
           activo: updatedField.activo,
           fechaCreacion: updatedField.fechaCreacion,
           fechaActualizacion: updatedField.fechaActualizacion
         };
         
         setFields(prev => prev.map(f => f.id === id ? mappedField : f));
         alert('Campo actualizado correctamente');
       } else {
         console.error('Error actualizando campo:', response.statusText);
         alert('Error al actualizar el campo. Por favor, int√©ntalo de nuevo.');
       }
     } catch (error) {
       console.error('Error actualizando campo:', error);
       alert('Error al actualizar el campo. Por favor, int√©ntalo de nuevo.');
     } finally {
       setLoading(false);
     }
   };

   // Eliminar campo
   const deleteField = async (id: number) => {
     if (!confirm('¬øEst√°s seguro de que quieres eliminar este campo?')) {
       return;
     }

     try {
       setLoading(true);
       
       // Obtener token de autenticaci√≥n
       const token = localStorage.getItem('token');
       if (!token) {
         console.error('No hay token de autenticaci√≥n');
         return;
       }

       const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8080'}/api/campos/${id}`, {
         method: 'DELETE',
         headers: {
           'Content-Type': 'application/json',
           'Authorization': `Bearer ${token}`
         }
       });

       if (response.ok) {
         setFields(prev => prev.filter(f => f.id !== id));
         alert('Campo eliminado correctamente');
       } else {
         console.error('Error eliminando campo:', response.statusText);
         alert('Error al eliminar el campo. Por favor, int√©ntalo de nuevo.');
       }
     } catch (error) {
       console.error('Error eliminando campo:', error);
       alert('Error al eliminar el campo. Por favor, int√©ntalo de nuevo.');
     } finally {
       setLoading(false);
     }
   };

   // Cancelar formulario
   const cancelForm = () => {
     setFormData({ nombre: '', superficie: 0, poligono: '', coordenadas: [] });
     setShowForm(false);
     setEditingField(null);
     setCurrentPolygon(null);
     // setMapReady(false); // Variable no utilizada
     
     // Limpiar pol√≠gono del mapa
     if (currentPolygon) {
       currentPolygon.setMap(null);
     }
   };

  // Mostrar campo en el mapa
  const showFieldOnMap = (field: Field) => {
    setSelectedField(field);
    setShowMap(true);
    // Asegurar que Google Maps est√© cargado para el modal
    if (!googleMapsReady) {
      const loadGoogleMaps = async () => {
        try {
          if (!(window as any).google || !(window as any).google.maps) {
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCWz9FKCHBdLqbjhHCPcECww5hs2ugiWA0&libraries=drawing,geometry&loading=async`;
            script.async = true;
            script.defer = true;
            
            script.onload = () => {
              const checkGoogleMaps = () => {
                if ((window as any).google && (window as any).google.maps && (window as any).google.maps.Map) {
                  console.log('‚úÖ Google Maps cargado para modal');
                  setGoogleMapsReady(true);
                } else {
                  setTimeout(checkGoogleMaps, 100);
                }
              };
              checkGoogleMaps();
            };
            
            document.head.appendChild(script);
          } else {
            setGoogleMapsReady(true);
          }
        } catch (error) {
          console.error('Error cargando Google Maps:', error);
        }
      };
      loadGoogleMaps();
    }
  };

     // Iniciar edici√≥n de campo
   const startEditField = (field: Field) => {
     setEditingField(field);
     setFormData({
       nombre: field.nombre,
       superficie: field.superficie,
       poligono: field.poligono,
       coordenadas: field.coordenadas || [],
       descripcion: field.descripcion,
       ubicacion: field.ubicacion,
       tipoSuelo: field.tipoSuelo,
       estado: field.estado,
       activo: field.activo
     });
     setShowForm(true);
   };

   // Mostrar coordenadas del campo
   const showFieldCoordinates = (field: Field) => {
     if (field.coordenadas && field.coordenadas.length > 0) {
       setSelectedCoordinates(field.coordenadas);
       setShowCoordinates(true);
     } else {
       alert('Este campo no tiene coordenadas almacenadas.');
     }
   };

   // Funci√≥n para calcular el centro del campo a partir de sus coordenadas
   const getFieldCenter = (coordinates: Array<{lat: number; lng: number}>) => {
     if (!coordinates || coordinates.length === 0) return null;
     
     const latSum = coordinates.reduce((sum, coord) => sum + coord.lat, 0);
     const lngSum = coordinates.reduce((sum, coord) => sum + coord.lng, 0);
     
     return {
       lat: latSum / coordinates.length,
       lon: lngSum / coordinates.length
     };
   };

  // Filtrar campos por b√∫squeda
  const filteredFields = fields.filter(field =>
    field.nombre.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      <div style={{ 
        background: 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)', 
        color: 'white', 
        padding: '20px', 
        borderRadius: '10px', 
        marginBottom: '20px' 
      }}>
        <h1 style={{ margin: '0 0 10px 0', fontSize: '24px' }}>üèûÔ∏è Gesti√≥n de Campos</h1>
        <p style={{ margin: '0', opacity: '0.9' }}>
          Administra los campos agr√≠colas de tu propiedad
        </p>
      </div>

      {/* Bot√≥n para agregar nuevo campo */}
      <div style={{ marginBottom: '20px' }}>
        <button
          onClick={() => setShowForm(true)}
          style={{
            background: '#4CAF50',
            color: 'white',
            border: 'none',
            padding: '12px 24px',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '16px',
            fontWeight: 'bold'
          }}
        >
          ‚ûï Agregar Nuevo Campo
        </button>
      </div>

      {/* Formulario para nuevo campo */}
      {showForm && (
        <div style={{ 
          background: '#f9f9f9', 
          padding: '20px', 
          borderRadius: '10px', 
          marginBottom: '20px',
          border: '1px solid #ddd'
        }}>
                     <h3 style={{ margin: '0 0 15px 0', color: '#333' }}>
             {editingField ? '‚úèÔ∏è Editar Campo' : 'üìù Nuevo Campo'}
           </h3>
          
          <div style={{ marginBottom: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              Nombre del Campo:
            </label>
            <input
              type="text"
              value={formData.nombre}
              onChange={(e) => setFormData(prev => ({ ...prev, nombre: e.target.value }))}
              style={{
                width: '100%',
                padding: '10px',
                border: '1px solid #ddd',
                borderRadius: '5px',
                fontSize: '14px'
              }}
              placeholder="Ej: Campo Norte"
            />
          </div>

                     <div style={{ marginBottom: '15px' }}>
             <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
               Superficie (hect√°reas):
             </label>
             <input
               type="number"
               value={formData.superficie}
               onChange={(e) => setFormData(prev => ({ ...prev, superficie: parseFloat(e.target.value) || 0 }))}
               style={{
                 width: '100%',
                 padding: '10px',
                 border: '1px solid #ddd',
                 borderRadius: '5px',
                 fontSize: '14px'
               }}
               placeholder="0.00"
               step="0.01"
             />
           </div>

           <div style={{ marginBottom: '15px' }}>
             <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
               Ubicaci√≥n:
             </label>
             <input
               type="text"
               value={formData.ubicacion || ''}
               onChange={(e) => setFormData(prev => ({ ...prev, ubicacion: e.target.value }))}
               style={{
                 width: '100%',
                 padding: '10px',
                 border: '1px solid #ddd',
                 borderRadius: '5px',
                 fontSize: '14px'
               }}
               placeholder="Ej: Ruta 8, Km 45"
             />
           </div>

           <div style={{ marginBottom: '15px' }}>
             <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
               Tipo de Suelo:
             </label>
             <select
               value={formData.tipoSuelo || ''}
               onChange={(e) => setFormData(prev => ({ ...prev, tipoSuelo: e.target.value }))}
               style={{
                 width: '100%',
                 padding: '10px',
                 border: '1px solid #ddd',
                 borderRadius: '5px',
                 fontSize: '14px'
               }}
             >
               <option value="">Seleccionar tipo de suelo</option>
               <option value="ARCILLOSO">Arcilloso</option>
               <option value="ARENOSO">Arenoso</option>
               <option value="FRANCO">Franco</option>
               <option value="FRANCO_ARCILLOSO">Franco Arcilloso</option>
               <option value="FRANCO_ARENOSO">Franco Arenoso</option>
               <option value="LIMO">Limo</option>
               <option value="OTRO">Otro</option>
             </select>
           </div>

           <div style={{ marginBottom: '15px' }}>
             <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
               Descripci√≥n:
             </label>
             <textarea
               value={formData.descripcion || ''}
               onChange={(e) => setFormData(prev => ({ ...prev, descripcion: e.target.value }))}
               style={{
                 width: '100%',
                 padding: '10px',
                 border: '1px solid #ddd',
                 borderRadius: '5px',
                 fontSize: '14px',
                 minHeight: '80px',
                 resize: 'vertical'
               }}
               placeholder="Descripci√≥n adicional del campo..."
             />
           </div>

          {/* Mapa para dibujar pol√≠gono */}
          <div style={{ marginBottom: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              üó∫Ô∏è Dibuja el pol√≠gono del campo:
            </label>
            <div style={{
              width: '100%',
              height: '400px',
              border: '2px solid #ddd',
              borderRadius: '8px',
              position: 'relative',
              overflow: 'hidden',
              background: '#f0f0f0'
            }}>
              {!googleMapsReady && (
                <div style={{
                  position: 'absolute',
                  top: '50%',
                  left: '50%',
                  transform: 'translate(-50%, -50%)',
                  color: '#666',
                  fontSize: '16px',
                  textAlign: 'center'
                }}>
                  üîÑ Cargando Google Maps...
                </div>
              )}
              
              {googleMapsReady && (
                <GoogleMapWithDrawing
                  onPolygonComplete={handlePolygonComplete}
                  onMapReady={handleMapReady}
                />
              )}
            </div>
            <p style={{ fontSize: '12px', color: '#666', marginTop: '5px' }}>
              üí° Haz clic en el bot√≥n de pol√≠gono y dibuja el √°rea del campo en el mapa
            </p>
          </div>

          {/* Mostrar coordenadas del campo */}
          {formData.coordenadas && formData.coordenadas.length > 0 && (
            <div style={{ marginBottom: '15px' }}>
              <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
                üìç Coordenadas del Campo:
              </label>
              <div style={{
                background: '#f8f9fa',
                border: '1px solid #dee2e6',
                borderRadius: '5px',
                padding: '10px',
                maxHeight: '150px',
                overflowY: 'auto',
                fontSize: '12px',
                fontFamily: 'monospace'
              }}>
                {formData.coordenadas.map((coord, index) => (
                  <div key={index} style={{ marginBottom: '2px' }}>
                    Punto {index + 1}: {coord.lat.toFixed(6)}, {coord.lng.toFixed(6)}
                  </div>
                ))}
              </div>
              <p style={{ fontSize: '11px', color: '#666', marginTop: '5px' }}>
                üíæ Las coordenadas se almacenan autom√°ticamente para uso en otros sistemas
              </p>
            </div>
          )}

          <div style={{ display: 'flex', gap: '10px' }}>
            <button
              onClick={saveField}
              disabled={loading || !formData.nombre || formData.superficie === 0}
              style={{
                background: '#4CAF50',
                color: 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '5px',
                cursor: loading || !formData.nombre || formData.superficie === 0 ? 'not-allowed' : 'pointer',
                fontSize: '14px',
                opacity: loading || !formData.nombre || formData.superficie === 0 ? 0.6 : 1
              }}
                         >
               {loading ? 'üíæ Guardando...' : (editingField ? 'üíæ Actualizar Campo' : 'üíæ Guardar Campo')}
             </button>
            
            <button
              onClick={cancelForm}
              style={{
                background: '#f44336',
                color: 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '5px',
                cursor: 'pointer',
                fontSize: '14px'
              }}
            >
              ‚ùå Cancelar
            </button>
          </div>
        </div>
      )}

      {/* B√∫squeda */}
      <div style={{ marginBottom: '20px' }}>
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="üîç Buscar campos..."
          style={{
            width: '100%',
            padding: '12px',
            border: '1px solid #ddd',
            borderRadius: '8px',
            fontSize: '16px'
          }}
        />
      </div>

      {/* Lista de campos */}
      <div style={{ 
        background: 'white', 
        borderRadius: '10px', 
        overflow: 'hidden',
        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
      }}>
        <div style={{ 
          background: '#f5f5f5', 
          padding: '15px', 
          borderBottom: '1px solid #ddd',
          fontWeight: 'bold'
        }}>
          üìã Campos Registrados ({filteredFields.length})
        </div>
        
        {filteredFields.length === 0 ? (
          <div style={{ padding: '20px', textAlign: 'center', color: '#666' }}>
            {searchTerm ? 'No se encontraron campos que coincidan con la b√∫squeda' : 'No hay campos registrados'}
          </div>
        ) : (
          <div style={{ maxHeight: '400px', overflowY: 'auto' }}>
            {filteredFields.map((field) => (
              <div key={field.id}>
                <div style={{ 
                  padding: '15px', 
                  borderBottom: '1px solid #eee',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}>
                                 <div>
                   <h4 style={{ margin: '0 0 5px 0', color: '#333' }}>{field.nombre}</h4>
                   <p style={{ margin: '0', color: '#666', fontSize: '14px' }}>
                     Superficie: {field.superficie} hect√°reas
                   </p>
                   {field.ubicacion && (
                     <p style={{ margin: '2px 0 0 0', color: '#666', fontSize: '12px' }}>
                       üìç {field.ubicacion}
                     </p>
                   )}
                   {field.tipoSuelo && (
                     <p style={{ margin: '2px 0 0 0', color: '#666', fontSize: '12px' }}>
                       üå± {field.tipoSuelo}
                     </p>
                   )}
                   {field.coordenadas && field.coordenadas.length > 0 && (
                     <p style={{ margin: '2px 0 0 0', color: '#888', fontSize: '12px' }}>
                       üó∫Ô∏è {field.coordenadas.length} puntos de coordenadas
                     </p>
                   )}
                   {field.estado && (
                     <span style={{
                       display: 'inline-block',
                       padding: '2px 8px',
                       borderRadius: '12px',
                       fontSize: '10px',
                       fontWeight: 'bold',
                       background: field.estado === 'ACTIVO' ? '#4CAF50' : '#FF9800',
                       color: 'white',
                       marginTop: '5px'
                     }}>
                       {field.estado}
                     </span>
                   )}
                 </div>
                                 <div style={{ display: 'flex', gap: '10px' }}>
                   <button
                     onClick={() => startEditField(field)}
                     style={{
                       background: '#4CAF50',
                       color: 'white',
                       border: 'none',
                       padding: '8px 16px',
                       borderRadius: '5px',
                       cursor: 'pointer',
                       fontSize: '12px'
                     }}
                   >
                     ‚úèÔ∏è Editar
                   </button>
                   {field.coordenadas && field.coordenadas.length > 0 && (
                     <button
                       onClick={() => showFieldCoordinates(field)}
                       style={{
                         background: '#FF9800',
                         color: 'white',
                         border: 'none',
                         padding: '8px 16px',
                         borderRadius: '5px',
                         cursor: 'pointer',
                         fontSize: '12px'
                       }}
                     >
                       üìç Coordenadas
                     </button>
                   )}
                   <button
                     onClick={() => showFieldOnMap(field)}
                     style={{
                       background: '#2196F3',
                       color: 'white',
                       border: 'none',
                       padding: '8px 16px',
                       borderRadius: '5px',
                       cursor: 'pointer',
                       fontSize: '12px'
                     }}
                   >
                     üó∫Ô∏è Ver en Mapa
                   </button>
                   {field.coordenadas && field.coordenadas.length > 0 && (
                     <button
                       onClick={() => setShowWeatherForField(showWeatherForField === field.id ? null : (field.id || null))}
                       style={{
                         background: showWeatherForField === field.id ? '#FF5722' : '#9C27B0',
                         color: 'white',
                         border: 'none',
                         padding: '8px 16px',
                         borderRadius: '5px',
                         cursor: 'pointer',
                         fontSize: '12px'
                       }}
                     >
                       {showWeatherForField === field.id ? '‚ùå Ocultar Clima' : 'üå§Ô∏è Ver Clima'}
                     </button>
                   )}
                   <button
                     onClick={() => deleteField(field.id!)}
                     style={{
                       background: '#f44336',
                       color: 'white',
                       border: 'none',
                       padding: '8px 16px',
                       borderRadius: '5px',
                       cursor: 'pointer',
                       fontSize: '12px'
                     }}
                   >
                     üóëÔ∏è Eliminar
                   </button>
                 </div>
                 
                 {/* Widget de clima del campo */}
                 {showWeatherForField === field.id && field.coordenadas && field.coordenadas.length > 0 && (
                   <div style={{ padding: '15px', backgroundColor: '#f8f9fa', borderTop: '1px solid #eee' }}>
                     <FieldWeatherWidget
                       fieldName={field.nombre}
                       coordinates={getFieldCenter(field.coordenadas)!}
                       compact={true}
                     />
                   </div>
                 )}
               </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal para mostrar campo en mapa */}
      {showMap && selectedField && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.8)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: 'white',
            borderRadius: '10px',
            padding: '20px',
            width: '90%',
            height: '80%',
            position: 'relative'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '15px'
            }}>
              <div>
                <h3 style={{ margin: '0 0 5px 0' }}>üó∫Ô∏è {selectedField.nombre}</h3>
                <p style={{ margin: '0', color: '#666', fontSize: '14px' }}>
                  Superficie: {selectedField.superficie} hect√°reas
                </p>
              </div>
              <button
                onClick={() => setShowMap(false)}
                style={{
                  background: '#f44336',
                  color: 'white',
                  border: 'none',
                  padding: '8px 16px',
                  borderRadius: '5px',
                  cursor: 'pointer'
                }}
              >
                ‚ùå Cerrar
              </button>
            </div>
            
            <div style={{
              width: '100%',
              height: 'calc(100% - 60px)',
              border: '1px solid #ddd',
              borderRadius: '8px',
              position: 'relative',
              overflow: 'hidden',
              background: '#f0f0f0'
            }}>
              {!googleMapsReady && (
                <div style={{
                  position: 'absolute',
                  top: '50%',
                  left: '50%',
                  transform: 'translate(-50%, -50%)',
                  color: '#666',
                  fontSize: '16px',
                  textAlign: 'center',
                  zIndex: 10
                }}>
                  üîÑ Cargando mapa...
                </div>
              )}
              
              {googleMapsReady && (
                <GoogleMapViewField
                  fieldPolygon={selectedField.poligono}
                  fieldName={selectedField.nombre}
                />
              )}
            </div>
          </div>
        </div>
      )}

      {/* Modal para mostrar coordenadas del campo */}
      {showCoordinates && selectedCoordinates.length > 0 && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.8)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: 'white',
            borderRadius: '10px',
            padding: '20px',
            width: '90%',
            maxWidth: '600px',
            maxHeight: '80%',
            position: 'relative',
            overflow: 'auto'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '15px'
            }}>
              <h3 style={{ margin: '0' }}>üìç Coordenadas del Campo</h3>
              <button
                onClick={() => setShowCoordinates(false)}
                style={{
                  background: '#f44336',
                  color: 'white',
                  border: 'none',
                  padding: '8px 16px',
                  borderRadius: '5px',
                  cursor: 'pointer'
                }}
              >
                ‚ùå Cerrar
              </button>
            </div>
            
            <div style={{ marginBottom: '15px' }}>
              <p style={{ margin: '0 0 10px 0', color: '#666' }}>
                Total de puntos: <strong>{selectedCoordinates.length}</strong>
              </p>
            </div>

            <div style={{
              maxHeight: '400px',
              overflow: 'auto',
              border: '1px solid #ddd',
              borderRadius: '5px',
              padding: '10px'
            }}>
              <table style={{
                width: '100%',
                borderCollapse: 'collapse',
                fontSize: '14px'
              }}>
                <thead>
                  <tr style={{
                    background: '#f5f5f5',
                    fontWeight: 'bold'
                  }}>
                    <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>
                      Punto #
                    </th>
                    <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>
                      Latitud
                    </th>
                    <th style={{ padding: '8px', textAlign: 'left', borderBottom: '1px solid #ddd' }}>
                      Longitud
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {selectedCoordinates.map((coord, index) => (
                    <tr key={index} style={{
                      borderBottom: '1px solid #eee'
                    }}>
                      <td style={{ padding: '8px' }}>
                        {index + 1}
                      </td>
                      <td style={{ padding: '8px', fontFamily: 'monospace' }}>
                        {coord.lat.toFixed(6)}
                      </td>
                      <td style={{ padding: '8px', fontFamily: 'monospace' }}>
                        {coord.lng.toFixed(6)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div style={{
              marginTop: '15px',
              padding: '10px',
              background: '#f9f9f9',
              borderRadius: '5px',
              fontSize: '14px'
            }}>
              <p style={{ margin: '0 0 5px 0', fontWeight: 'bold' }}>üìã Copiar coordenadas:</p>
              <textarea
                value={JSON.stringify(selectedCoordinates, null, 2)}
                readOnly
                style={{
                  width: '100%',
                  height: '100px',
                  fontFamily: 'monospace',
                  fontSize: '12px',
                  border: '1px solid #ddd',
                  borderRadius: '3px',
                  padding: '5px',
                  resize: 'vertical'
                }}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default FieldsManagement;
